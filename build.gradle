plugins {
    id 'java'
    id 'org.springframework.boot' version '3.4.0'
    id 'io.spring.dependency-management' version '1.1.4'
    id 'io.freefair.lombok' version '8.1.0'
    id 'application'
    id 'java-library'
    id 'distribution'
}

repositories {
    mavenCentral()
}

java {
    sourceCompatibility = JavaVersion.VERSION_17
    targetCompatibility = JavaVersion.VERSION_17
    toolchain {
        languageVersion.set(JavaLanguageVersion.of(17))
    }
}

configurations {
    compileOnly {
        extendsFrom annotationProcessor
    }
}

application {
    mainClass = 'src.main.java.app.DeliverySystemCLI'
}

dependencies {
    // Spring Boot
    implementation 'org.springframework.boot:spring-boot-starter:3.4.0'
    
    // Logging
    implementation platform('org.slf4j:slf4j-bom:2.0.9')
    implementation 'org.slf4j:slf4j-api'
    implementation 'ch.qos.logback:logback-classic:1.4.14'    
    // Testing
    testImplementation platform('org.junit:junit-bom:5.10.1')
    testImplementation 'org.junit.jupiter:junit-jupiter'
    testImplementation 'org.mockito:mockito-core:5.8.0'
    testImplementation 'org.mockito:mockito-junit-jupiter:5.8.0'
    testImplementation 'org.springframework.boot:spring-boot-starter-test:3.4.0'
    
    // Lombok
    compileOnly 'org.projectlombok:lombok:1.18.30'
    annotationProcessor 'org.projectlombok:lombok:1.18.30'

    // Monitoring and Metrics
    implementation 'org.springframework.boot:spring-boot-starter-actuator:3.4.0'
    implementation 'io.micrometer:micrometer-registry-prometheus:1.12.0'
}

test {
    useJUnitPlatform()
    
    testLogging {
        events 'passed', 'skipped', 'failed'
    }
}

/* distributions {
    main {
        contents {
            from('bin') {
                into 'bin'
            }
            from('build') {
                into 'build'
            }
        from('build-cache') {
                into 'build-cache'
            }
            from('gradle') {
                into '.gradle'
            }
        }
    }
} */

tasks.withType(JavaCompile) {
    options.fork = true
    options.forkOptions.jvmArgs += [
        // Heap and Memory Logging
        '-XX:+HeapDumpOnOutOfMemoryError',
        '-XX:HeapDumpPath=build/heapdump',
        '-verbose:gc', 
        '-Xloggc:build/gc.log', 
        '-XX:+PrintGCDetails', 
        '-XX:+PrintGCTimeStamps',
        '-XX:+PrintGCDateStamps',
        '-XX:+PrintHeapAtGC',
        '-XX:+PrintTenuringDistribution',
        '-XX:+PrintGCApplicationStoppedTime',
        '-XX:+UseGCLogFileRotation', 
        '-XX:NumberOfGCLogFiles=5', 
        '-XX:GCLogFileSize=5M',
        
        // Memory Management
        '-XX:+UseG1GC',  // Use G1 Garbage Collector
        '-XX:MaxGCPauseMillis=200',  // Max pause time goal
        '-XX:G1HeapRegionSize=8m'  // Adjust region size
    ]
}

