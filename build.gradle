plugins {
    id 'java'
    id 'org.springframework.boot' version '3.1.5'
    id 'io.spring.dependency-management' version '1.1.4'
    id 'io.freefair.lombok' version '8.1.0'
    id 'application'
    id 'java-library'
    id 'distribution'
}

// Create directories
def createDirectories = tasks.register('createDirectories') {
    doFirst {
        mkdir 'build'
        mkdir 'build/heapdump'
        mkdir 'build/logs'
    }
}

tasks.named('compileJava') {
    dependsOn createDirectories
    options.fork = true
    options.forkOptions.jvmArgs = [
        '-XX:+HeapDumpOnOutOfMemoryError',
        '-XX:HeapDumpPath=build/heapdump',
        '-Xlog:gc*:file=build/logs/gc.log:time,uptime,level,tags',
        '-XX:+UseG1GC',
        '-XX:MaxGCPauseMillis=200',
        '-XX:+UseStringDeduplication'
    ]
}

repositories {
    mavenCentral()
}

java {
    sourceCompatibility = JavaVersion.VERSION_17
    targetCompatibility = JavaVersion.VERSION_17
    toolchain {
        languageVersion.set(JavaLanguageVersion.of(17))
    }
}

configurations {
    compileOnly {
        extendsFrom annotationProcessor
    }
}

application {
    mainClass = 'app.DeliverySystemCLI' // Updated main class
}

dependencies {
    // Spring Boot
    implementation 'org.springframework.boot:spring-boot-starter:3.1.5'
    
    // Logging
    implementation platform('org.slf4j:slf4j-bom:2.0.9')
    implementation 'org.slf4j:slf4j-api'
    implementation 'ch.qos.logback:logback-classic:1.4.14'    
    // Testing
    testImplementation platform('org.junit:junit-bom:5.10.1')
    testImplementation 'org.junit.jupiter:junit-jupiter'
    testImplementation 'org.mockito:mockito-core:5.8.0'
    testImplementation 'org.mockito:mockito-junit-jupiter:5.8.0'
    testImplementation 'org.springframework.boot:spring-boot-starter-test:3.1.5'
    
    // Lombok
    compileOnly 'org.projectlombok:lombok:1.18.30'
    annotationProcessor 'org.projectlombok:lombok:1.18.30'

    // Monitoring and Metrics
    implementation 'org.springframework.boot:spring-boot-starter-actuator:3.1.5'
    implementation 'io.micrometer:micrometer-registry-prometheus:1.12.0'
}

test {
    useJUnitPlatform()
    
    testLogging {
        events 'passed', 'skipped', 'failed'
    }
}

distributions {
    main {
        contents {
            into('/') {
                from 'src/dist'
                from 'build/libs'
            }
            into('lib') {
                from configurations.runtimeClasspath
            }
            into('config') {
                from 'src/main/resources'
                exclude '**/*.properties.template'
            }
            into('bin') {
                from 'scripts'
                fileMode = 0755
            }
            into('logs') {
                // Create empty logs directory
            }
        }
    }
}

// Add this new task to create distribution directories
tasks.register('createDistDirs') {
    doLast {
        mkdir 'src/dist'
        mkdir 'scripts'
    }
}

tasks.named('assembleDist') {
    dependsOn 'createDistDirs'
}

